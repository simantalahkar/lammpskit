LAMMPSKit Project Structure
==========================

Root Directory:
└── lammpskit/                                    # Main project directory

Configuration Files:
├── pyproject.toml                                # Modern Python packaging configuration 
├── setup.py                                     # Legacy Python packaging setup
├── requirements.txt                             # Production dependencies
├── requirements-dev.txt                         # Development dependencies
├── uv.lock                                      # Dependency lock file (uv package manager)
├── MANIFEST.in                                  # Package data inclusion rules
├── .python-version                              # Python version specification
├── .gitignore                                   # Git ignore patterns
├── .travis.yml                                  # Travis CI configuration
├── Dockerfile                                   # Docker container configuration
├── .dockerignore                                # Docker ignore patterns
└── .coverage                                    # Coverage report data

Documentation & Reports:
├── README.md                                    # Project overview and usage
├── CHANGELOG.md                                 # Version history and changes
├── LICENSE                                      # GPL-3.0-or-later license
├── LAMMPSKIT_EVOLUTION_WORKFLOW.md              # Technical workflow documentation
├── phase2_categorization_report.md              # Refactoring analysis report
├── phase3a_safe_removals_complete.md            # Safe module removal report
├── phase3b_questionable_modules_complete.md     # Questionable module analysis
├── phase3c_over_engineering_simplification_complete.md  # Simplification report
└── streamlining_project_complete_summary.md     # Overall refactoring summary

Main Package:
lammpskit/                                       # Main Python package
├── __init__.py                                  # Package initialization, version 0.2.2
├── config.py                                   # Configuration and validation utilities
├── io/                                         # I/O utilities for LAMMPS data
│   ├── __init__.py                             # I/O module initialization
│   └── lammps_readers.py                       # LAMMPS file format readers
├── plotting/                                   # General plotting utilities
│   ├── __init__.py                             # Plotting module initialization
│   ├── utils.py                                # Core plotting functions (plot_multiple_cases)
│   └── timeseries_plots.py                     # Time series plotting configurations and functions
└── ecellmodel/                                 # Electrochemical cell simulation analysis
    ├── __init__.py                             # ECell module initialization
    ├── data_processing.py                      # Atom type selection and distributions
    └── filament_layer_analysis.py              # Main analysis workflows and OVITO integration

Test Suite:
tests/                                          # Test directory (12 test files, 205 baseline images)
├── test_config.py                              # Configuration validation tests
├── test_io.py                                  # I/O functionality tests
├── test_plotting.py                           # General plotting utility tests
├── test_timeseries_plots.py                   # Time series plotting tests
├── test_centralized_font_control.py           # Font control and styling tests
├── baseline/                                   # Reference images for matplotlib tests
│   └── *.png                                   # Baseline plot images for comparison (205 images)
└── test_ecellmodel/                            # Electrochemical model tests
    ├── test_analyze_clusters.py               # Cluster analysis tests
    ├── test_data_processing.py                # Data processing function tests
    ├── test_plot_atomic_charge_distribution.py # Charge distribution plotting tests
    ├── test_plot_atomic_distribution.py       # Atomic distribution plotting tests
    ├── test_plot_displacement_comparison.py   # Displacement comparison tests
    ├── test_plot_displacement_timeseries.py   # Time series plotting tests
    ├── test_track_filament_evolution.py       # Filament evolution tracking tests
    ├── baseline/                               # ECell module baseline images
    │   └── *.png                               # Specialized baseline images for electrochemical tests
    └── test_data/                              # Test data files
        ├── *.lammpstrj                         # LAMMPS trajectory files
        ├── data_for_comparison/                # Displacement comparison test data
        │   └── *.dat                           # Thermodynamic data files
        ├── data_for_layer_analysis/            # Cluster analysis test data
        │   └── *.lammpstrj                     # OVITO-compatible trajectory files
        └── data_for_timeseries/                # Time series plotting test data
            └── *.dat                           # Element-specific displacement data

Usage Examples:
usage/                                          # Usage examples and demonstrations
└── ecellmodel/                                 # Electrochemical analysis examples
    ├── README.md                               # Usage instructions and examples
    ├── run_analysis.py                         # Main analysis demonstration script
    ├── data/                                   # Example input data
    │   └── ecellmodel/                         # Sample trajectory and data files
    └── output/                                 # Example output files and plots

Development & Build Artifacts:
├── dist/                                       # Distribution packages (wheels, source)
├── lammpskit.egg-info/                         # Package metadata
├── demo_output/                                # Demonstration output files
├── temp_baseline/                              # Temporary baseline images during testing
├── test_output/                                # Test execution output files
└── supporting_docs/                            # Development documentation and backups
    ├── baseline_backup/                        # Backup of previous baseline images
    ├── directory_backups/                      # Project structure backups
    ├── examples/                               # Historical examples
    ├── tests/                                  # Historical test files
    ├── data/                                   # Development data files
    ├── output/                                 # Development output
    ├── prior_baseline/                         # Previous baseline versions
    └── *.py, *.md, *.png                       # Various development files and reports

Package Distribution Components:
===============================

PyPI Package (via setup.py and MANIFEST.in):
    INCLUDED in distribution:
    - lammpskit/ (Complete Python package)
    - README.md, LICENSE, CHANGELOG.md (Documentation)
    - requirements.txt, requirements-dev.txt (Dependencies)
    - setup.py, pyproject.toml (Installation files)
    
    EXCLUDED from distribution:
    - tests/ (Testing infrastructure)
    - supporting_docs/ (Development documentation)
    - usage/ (Examples)
    - Build artifacts (dist/, *.egg-info/)
    - Temporary files (temp_baseline/, test_output/)

Docker Image (via Dockerfile and .dockerignore):
    INCLUDED in Docker image:
    - lammpskit/ (Complete Python package)
    - README.md, LICENSE, CHANGELOG.md (Documentation)
    - requirements.txt (Runtime dependencies)
    - setup.py, pyproject.toml (Installation files)
    
    EXCLUDED from Docker image:
    - tests/ (Testing infrastructure)
    - usage/ (Examples)
    - supporting_docs/ (Development files)
    - All build artifacts and caches
    - Virtual environments (.venv/)

GitHub Repository (via .gitignore):
    TRACKED in repository:
    - Complete source code (lammpskit/)
    - All documentation (README, CHANGELOG, reports)
    - Test suite (tests/) with baseline images
    - Usage examples (usage/)
    - Configuration files (packaging, CI/CD)
    
    EXCLUDED from repository:
    - Build artifacts (dist/, *.egg-info/)
    - Python caches (__pycache__/, *.pyc)
    - Virtual environments (.venv/)
    - Coverage reports (.coverage)
    - Temporary outputs (temp_baseline/, test_output/)
    - Development artifacts (supporting_docs/)

Key Architecture:
- Modular design with clear separation of concerns
- General utilities (io, plotting, config) for reusability
- Specialized ecellmodel package for HfTaO electrochemical analysis
- Comprehensive test coverage with 12 test files and 205 baseline images
- Atom type system: Type 2=Hf, odd types=O, even types except 2=Ta
- Types 5,6,9,10 also function as electrode atoms
- Version 0.2.2 maintained consistently across all configuration files

Recent Changes Summary (Major Refactoring Completed):
=======================================================
This project has undergone extensive refactoring and cleanup to improve modularity,
maintainability, and code quality. The following major changes were implemented:

1. Atom Type System Fixes:
   - Corrected atom type mapping throughout codebase: Type 2=Hafnium, odd types=Oxygen,
     even types (except 2)=Tantalum, types 5,6,9,10 also function as electrodes
   - Updated all functions in data_processing.py with consistent atom type logic
   - Fixed atomic distribution calculations and charge distribution computations

2. Modular Architecture Implementation:
   - Extracted reusable functions into data_processing.py module
   - Moved general plotting utilities to plotting/utils.py
   - Added timeseries_plots.py module for specialized time series plotting
   - Separated I/O functionality into io/lammps_readers.py
   - Consolidated configuration logic into config.py
   - Eliminated code duplication across analysis functions

3. Configuration Management:
   - Centralized validation logic and default parameters
   - Implemented consistent error handling and input validation
   - Standardized configuration classes for plot and timeseries settings

4. Code Quality Improvements:
   - Enhanced function documentation with comprehensive docstrings
   - Improved error handling with specific exception types and messages
   - Standardized naming conventions and code formatting
   - Removed unused imports and dead code
   - Streamlined electrochemical context in documentation

5. Testing Infrastructure:
   - Maintained 12 comprehensive test files with 205 baseline images
   - All tests passing with preserved functionality
   - Added baseline image comparison for matplotlib plotting tests
   - Comprehensive test coverage for all modules and functions
   - Added specialized time series plotting tests

6. Version Consistency:
   - Updated all configuration files to version 0.2.2
   - Ensured consistent dependency specifications
   - Maintained backward compatibility

Current Status: All refactoring complete, all tests passing, ready for production use.
Distribution Strategy: Core package via PyPI, Docker image for reproducible environments,
full development environment via GitHub repository.
